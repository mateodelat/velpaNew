type Comentario @model 
@auth(
  rules: [
    { allow: public,}
]) 
@key(name: "byUsuario", fields: ["evaluadoID"]) 
@key(name: "byCreador", fields: ["creadorID"]) 
 {
  id: ID!
  calificacion:Float!
  resena:String
  creadorID:ID!
  evaluadoID: ID!
}




type SolicitudGuia @model 
@auth(
    rules: [
      { allow: public,}
    ])

  @key(name: "byUsuario", fields: ["creadorID"])
  @key(name: "byEvaluador", fields: ["evaluadorID"])
  {
  id: ID!
  creadorID:ID!
  evaluadorID: ID
  status: solicitudAprovada
  evaluador: Usuario @connection(fields: ["evaluadorID"])
  Usuario: Usuario! @connection(fields: ["creadorID"])
  AventurasAVerificar: [SolicitudAventura] @connection(keyName:"bySolicitud", fields:["id"])
  comentarios:String
}
enum solicitudAprovada {
  aproved
  pending
  rejected
}


# Relacion muchos a muchos Solicitud con aventuras
type SolicitudAventura @model(queries:null)
  @auth(
    rules:[
      { allow: public,}
    ])
  
  @key(name: "byAventura", fields: ["aventuraID", "solicitudID"])
  @key(name: "bySolicitud", fields: ["solicitudID", "aventuraID"])
 {
  id: ID!
  aventuraID: ID!
  solicitudID: ID!
  aventura: Aventura! @connection(fields: ["aventuraID"])
  solicitud: SolicitudGuia! @connection(fields: ["solicitudID"])
}





type Usuario @model
@auth(rules: [
    { allow: public },
])
{
  id: ID!
  nombre: String
  apellido: String
  foto: String
  nickname: String!
  calificacion: Float
  descripcion: String
  comentarios: [String]

######Datos de solicitar ser guia############
  tipo: tipoUsuario

  # General
  selfie: String
  INE: [String]
  licencia: [String]
  comentariosAdicionales:String
  telefono:String
  capacidadMaxima: Int
  placaVehiculos: [String]
  
  # Usuario individual
  tarjetaCirculacion: String
  certificaciones:[String]

  #Agencia
  sitioWeb: String
  redSocial: String

  # Cuenta de stripe
  stripeID: String

  solicitudes: [SolicitudGuia] @connection(keyName: "byUsuario", fields: ["id"])
  evaluaciones: [Comentario] @connection(keyName: "byUsuario", fields: ["id"])
  fechas: [Fecha] @connection(keyName: "byGuia", fields: ["id"])
  reservaciones: [Reservaciones] @connection(keyName: "byUsuario", fields: ["id"])
  aventurasAutorizadas: [UsuarioAventura] @connection(keyName:"byUsuario", fields:["id"])

  # Messaging 
  messages: [Message] @connection(keyName: "byUsuario", fields: ["id"])
  chatRooms: [ChatRoomUsuario] @connection(keyName: "byUsuario", fields: ["id"])

}
enum tipoUsuario {
  agencia
  guiaIndividual
}


# Query para la relacion muchos a muchos de la lista de
# usuarios autorizados a aventura
type UsuarioAventura @model(queries: null) 
  @auth(
    rules:[
      { allow: public,}
    ])
  
  @key(name: "byAventura", fields: ["aventuraID", "usuarioID"])
  @key(name: "byUsuario", fields: ["usuarioID", "aventuraID"])
 {
  id: ID!
  aventuraID: ID!
  usuarioID: ID!
  bloqueado: Boolean
  aventura: Aventura! @connection(fields: ["aventuraID"])
  usuario: Usuario! @connection(fields: ["usuarioID"])
}



type Aventura @model 
@auth(rules: [
      { allow: public },
     ]) 

@key(name: "byCategoria", fields: ["categoriaID"]) {
  id: ID!
  titulo: String!
  imagenFondo: String!
  imagenDetalle: [String!]!
  precioMin: Int!
  precioMax: Int!
  duracion: String!
  descripcionCorta: String!
  descripcionLarga: String!

  materialObligatorio: [String!]
  materialOpcional: [String!]
  materialAcampada: [String!]
  alimentacion: [String!]
  materialIncluido:[String!]
  
  dificultad: Float!
  precioVIP: Int
  descripcionVIP: String

  fechaInicialDisponible: String
  fechaFinalDisponible: String
  
  categoriaID: ID

  ubicacionNombre: String
  ubicacionLink: String

  comision: Float!

  usuariosAutorizados: [UsuarioAventura] @connection(keyName:"byAventura", fields:["id"])
  Fechas: [Fecha] @connection(keyName: "byAventura", fields: ["id"])
}


type Reservaciones @model 
@auth(rules: [
    { allow: public },
])
@key(name: "byFecha", fields: ["fechaID"]) 
@key(name: "byUsuario", fields: ["usuarioID"]) 
{
  id: ID!
  
  total: Float!
  comisionPorPersona:Float!

  personas: Int!
  tercera: Int
  adultos: Int
  ninos: Int

  fechaID: ID!
  usuarioID: ID!

  usuario:Usuario! @connection( fields: ["usuarioID"])

  idPago:String!
}


type Fecha @model 
@auth(rules: [
    { allow: public,}
])
@key(name: "byAventura", fields: ["aventuraID"])
@key(name: "byGuia", fields: ["guiaID"]) 
 {
  id: ID!
  personasTotales: Int!
  fechaInicial: String!
  fechaFinal: String!
  precio: Int!
  comision: Float!
  aventuraID: ID!
  guiaID: ID!

  # Detalle de la fecha
  itinerario: [AWSJSON]
  ubicacionNombre: String
  ubicacionLink: String

  # Permiso de tercera edad o ni√±os
  denyTercera:Boolean
  denyNinos:Boolean

  # Que llevar personalizado
  materialObligatorio: [String]
  materialOpcional: [String]
  materialAcampada: [String]
  alimentacion: [String]

  materialIncluido:[String]
  
  chatroomID:ID!
  chatroom:ChatRoom @connection(name:"FechaChat",fields:["chatroomID"])

  Guia: [Usuario] @connection( fields: ["guiaID"])
  Reservaciones: [Reservaciones] @connection(keyName: "byFecha", fields: ["id"])
}



type Categoria @model 
@auth(rules: [
    { allow: public },
])
{
  id: ID!
  titulo: String!
  foto: String!
  Aventuras: [Aventura] @connection(keyName: "byCategoria", fields: ["id"])
}



type Subscription{
# Necesitamos escuchar a las fechas que pertenezcan a la aventura
  onUpdateFechasByAventura(aventuraID:String!,): Fecha
   @aws_subscribe(mutations:["createFecha","updateFecha"])

  onDeleteFechasByAventura(aventuraID:String!,): Fecha
   @aws_subscribe(mutations:["deleteFecha"])

  onCreateReservacionesByFecha(fechaID:String!): Reservaciones
   @aws_subscribe(mutations:["createReservaciones"])

  onDeleteReservacionesByFecha(fechaID:String!,): Reservaciones
   @aws_subscribe(mutations:["deleteReservaciones"])

  onCreateMensajeByChatroom(chatroomID:String!,): Message
   @aws_subscribe(mutations:["createMessage"])

  onUpdateChatRoomByID(id:String!,): ChatRoom
   @aws_subscribe(mutations:["createChatRoom", "updateChatRoom"])
}

type Mutation{
  createPaymentIntent(amount:Int!,comision:Float!,destinationStripeID:String!):PaymentIntent!@function(
    name:"CreatePaymentIntent-${env}"
    )
  CreateStripeAcount(email:String,sub:ID!,url:String!):AcountResult!@function(
    name:"CreateStripeAcount-${env}"
    )
  loginLinkStripe(stripeID:String!):AcountResult@function(
    name:"loginLinkStripe-${env}"
    )
  RetrieveBalanceStripe(stripeID:String!):RetrieveBalanceStripe@function(
    name:"RetrieveBalanceStripe-${env}"
    )
}

type PaymentIntent{
  clientSecret:String!
  id:String!
}

type AcountResult{
  url:String!
}

type RetrieveBalanceStripe{
  result: AWSJSON!
}




##################MESSAGING###########################
type Message @model @auth(rules: [{allow: public}]) @key(name: "byUsuario", fields: ["usuarioID"]) @key(name: "byChatRoom", fields: ["chatroomID"]) {
  id: ID!
  content: String!
  usuarioID: ID
  chatroomID: ID
  image: String
  audio: String
}

type ChatRoom @model @auth(rules: [{allow: public}]) 
@key(name: "byFecha", fields: ["fechaID"])
{
  id: ID!
  name:String
  picture:String
  newMessages: Int
  lastMessage: String
  LastMessage: Message @connection

  fechaID:ID
  fecha: Fecha @connection( name:"FechaChat",fields:["fechaID"])

  Messages: [Message] @connection(keyName: "byChatRoom", fields: ["id"])
  usuarios: [ChatRoomUsuario] @connection(keyName: "byChatRoom", fields: ["id"])
}

type ChatRoomUsuario @model @key(name: "byUsuario", fields: ["usuarioID", "chatroomID"]) @key(name: "byChatRoom", fields: ["chatroomID", "usuarioID"]) @auth(rules: [{allow: public}, {allow: public}]) {
  id: ID!
  usuarioID: ID!
  chatroomID: ID!
  usuario: Usuario! @connection(fields: ["usuarioID"])
  chatroom: ChatRoom! @connection(fields: ["chatroomID"])
}
 