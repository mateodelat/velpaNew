type Aventura @model @auth(rules: [
   {allow: private, operations: [read]},
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  titulo: String!
  imagenFondoIdx: Int!
  imagenDetalle: [String]!
  precioMin: Int!
  precioMax: Int!
  duracion: String
  descripcion: String
  dificultad: Float!
  ubicacionNombre: String
  ubicacionLink: AWSURL
  comision: Float!
  estadoAventura: EstadoAventura!
  coordenadas: AWSJSON!
  altitud: Float
  distanciaRecorrida: Float
  altimetriaRecorrida: Float
  categoria: Categorias
  puntoReunionNombre: String
  puntoReunionLink: AWSURL
  materialDefault: String
  incluidoDefault: [String]


  SolicitudGuias: [AventuraSolicitudGuia] @connection(keyName: "byAventura", fields: ["id"])
  UsuariosAutorizados: [AventuraUsuario] @connection(keyName: "byAventura", fields: ["id"])
  Fechas: [Fecha] @connection(keyName: "byAventura", fields: ["id"])
  Publicidad: [Publicidad] @connection(keyName: "byAventura", fields: ["id"])

}

type Reserva @model 
@key(name: "byFecha", fields: ["fechaID"]) 
@key(name: "byUsuario", fields: ["usuarioID"]) 
@auth(rules: [
   {allow: private, operations: [read]}, 
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  total: Float!
  comisionPorPersona: Float!
  tercera: Int!
  ninos: Int!
  adultos: Int!
  pagoID: String!

  fechaID: ID
  usuarioID: ID
}

type Fecha @model 
@key(name: "byAventura", fields: ["aventuraID"]) 
@key(name: "byUsuario", fields: ["usuarioID"]) 
@auth(rules: [
   {allow: private, operations: [read]}, 
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  personasTotales: Int!
  fechaInicial: AWSTimestamp!
  fechaFinal: AWSTimestamp!
  precio: Float!
  comision: Float!
  itinerario: String!
  puntoReunionNombre: String!
  puntoReunionLink: String!
  allowTercera: Boolean!
  allowNinos: Boolean!
  material: String
  incluido: String!
  titulo: String
  descripcion: String
  imagenRuta: String

  aventuraID: ID!
  usuarioID: ID!

  Reservas: [Reserva] @connection(keyName: "byFecha", fields: ["id"])
  ChatRoom: [ChatRoom] @connection(keyName: "byFecha", fields: ["id"])
}

type Usuario @model 
@auth(rules: [
   {allow: public, operations: [create,read]}, 
   {allow: private, operations: [read]}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, 
   {allow: owner, ownerField: "owner"}
  ]) 
  {
  id: ID!
  tipo: TipoUsuario

  nombre: String
  apellido: String
  foto: String
  nickname: String
  calificacion: Float

  stripeID: String
  
  selfie: String
  INE: [String]
  licencia: [String]
  comentariosAdicionales: String
  telefono: AWSPhone
  capacidadMaxima: Int
  tarjetaCirculacion: String
  certificaciones: [String]
  sitioWeb: AWSURL
  usuarioRedSocial: String

  owner: String
  
  AventurasAutorizadas: [AventuraUsuario] @connection(keyName: "byUsuario", fields: ["id"])
  Mensajes: [Mensaje] @connection(keyName: "byUsuario", fields: ["id"])
  ChatRooms: [ChatRoomUsuario] @connection(keyName: "byUsuario", fields: ["id"])
  Reservas: [Reserva] @connection(keyName: "byUsuario", fields: ["id"])
  Fechas: [Fecha] @connection(keyName: "byUsuario", fields: ["id"])
  Notificaciones:[Notificacion] @connection(keyName: "byUsuario", fields: ["id"])
  SolicitudesCreadas: [SolicitudGuia] @connection(keyName: "byUsuario", fields: ["id"])
}

type ChatRoom @model 
@auth(rules: [
   {allow: public, operations: [read]}, 
   {allow: private}
  ]) 
@key(name: "byFecha", fields: ["fechaID"])
{
  id: ID!
  name: String!
  picture: String
  newMessages: Int!
  lastMessage: Mensaje @connection

  fechaID: ID

  Mensajes: [Mensaje] @connection(keyName: "byChatRoom", fields: ["id"])
  Participantes: [ChatRoomUsuario] @connection(keyName: "byChatRoom", fields: ["id"])
}

type Mensaje @model 
@key(name: "byUsuario", fields: ["usuarioID"]) 
@key(name: "byChatRoom", fields: ["chatroomID"])
@auth(rules: [
   {allow: owner, operations: [create, delete]}, 
   {allow: private, operations: [read]},
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  content: String!
  usuarioID: ID
  chatroomID: ID
}


type SolicitudGuia @model 
@auth(rules: [
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ])
@key(name: "byUsuario", fields: ["usuarioID"])
 {

  id: ID!
  status: StatusSolicitud!
  evaluadorID: ID
  usuarioID:ID
  Aventuras: [AventuraSolicitudGuia] @connection(keyName: "bySolicitudGuia", fields: ["id"])
}

type Notificacion @model
 @key(name: "byUsuario", fields: ["usuarioID"])
 @auth(rules: [
   {allow: owner, ownerField: "owner"},
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  tipo: TipoNotificacion!
  titulo:String!
  descripcion:String
  usuarioID: ID!

  imagen:String

  owner:String

  reservaID: ID
  fechaID: ID
  aventuraID: ID
  solicitudGuiaID: ID
}


type Publicidad @model
 @key(name: "byAventura", fields: ["aventuraID"])
 @auth(rules: [
   {allow: public, operations: [read]} , 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]},
  ]) {

  id: ID!
  tipo: TipoPublicidad!

  titulo:String!
  descripcion:String
  imagenFondo:String!
  video:String
  linkAnuncio:String

  aventuraID: ID
}


enum EstadoAventura {
  AUTORIZADO
  PENDIENTE
  RECHAZADO
}


enum TipoNotificacion{
  RESERVAENFECHA
  RESERVACREADA

  RECORDATORIOFECHA

  SOLICITUDGUIA
  SOLICITUDAVENTURA

  ADMIN
}

enum TipoPublicidad {
  AVENTURA
  ANUNCIO
  ACTUALIZACION
}

enum Categorias {
  APLINISMO
  MTB
  OTROS
}

enum StatusSolicitud {
  APROVADA
  PENDIENTE
  RECHAZADA
}

enum TipoUsuario {
  AGENCIA
  GUIAINDIVIDUAL
}

type AventuraSolicitudGuia @model(queries: null) @key(name: "byAventura", fields: ["aventuraID", "solicitudguiaID"]) @key(name: "bySolicitudGuia", fields: ["solicitudguiaID", "aventuraID"]) @auth(rules: [{allow: private, operations: [read]}, {allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  aventuraID: ID!
  solicitudguiaID: ID!
  aventura: Aventura! @connection(fields: ["aventuraID"])
  solicitudguia: SolicitudGuia! @connection(fields: ["solicitudguiaID"])
}

type AventuraUsuario @model(queries: null) @key(name: "byAventura", fields: ["aventuraID", "usuarioID"]) @key(name: "byUsuario", fields: ["usuarioID", "aventuraID"]) @auth(rules: [{allow: private, operations: [read]}, {allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: private, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  aventuraID: ID!
  usuarioID: ID!
  aventura: Aventura! @connection(fields: ["aventuraID"])
  usuario: Usuario! @connection(fields: ["usuarioID"])
}

type ChatRoomUsuario @model(queries: null) @key(name: "byChatRoom", fields: ["chatroomID", "usuarioID"]) @key(name: "byUsuario", fields: ["usuarioID", "chatroomID"]) @auth(rules: [{allow: public, operations: [read]}, {allow: private}, {allow: private, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  chatroomID: ID!
  usuarioID: ID!
  chatroom: ChatRoom! @connection(fields: ["chatroomID"])
  usuario: Usuario! @connection(fields: ["usuarioID"])
}



########################################################
########################FUNCIONES#######################
########################################################
type Mutation {
  createPaymentIntent(amount: Float!, destinationStripeID: String!, comision: Float!): PaymentIntent! @function(name: "CreatePaymentIntent-${env}")
  createStripeAcount(sub: String!, email: String!, url: String!): CreateAcount! @function(name: "CreateStripeAcount-${env}")
}

type PaymentIntent {
  id: String
  clientSecret: String
}
 
type CreateAcount {
  url: String
}
 