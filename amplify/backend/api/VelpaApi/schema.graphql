type Aventura
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      {
        allow: private # operations: [create, read]
      }
      # { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  titulo: String!

  imagenFondoIdx: Int!
  imagenDetalle: [String]!

  precioMin: Float
  precioMax: Float

  duracion: String
  descripcion: String
  dificultad: Float

  ubicacionNombre: String!
  ubicacionId: String!
  ubicacionLink: String
  coordenadas: AWSJSON!

  estadoAventura: EstadoAventura!
  altitud: Float
  distanciaRecorrida: Float
  altimetriaRecorrida: Float
  categoria: Categorias

  materialDefault: String
  incluidoDefault: [String]

  usuarioID: String

  owner: String

  SolicitudGuias: [SolicitudGuia]
    @manyToMany(relationName: "AventuraSolicitudGuias")

  UsuariosAutorizados: [Usuario] @manyToMany(relationName: "AventuraUsuarios")

  Fechas: [Fecha] @hasMany(indexName: "byAventura", fields: ["id"])
}

type Reserva
  @model
  @auth(
    rules: [
      {
        allow: private
        # ,operations: [read, delete]
      }
      # { allow: groups, groups: ["Admin"] }
      # { allow: owner }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  total: Float!
  comision: Float!
  pagadoAlGuia: Float!

  tercera: Int!
  ninos: Int!
  adultos: Int!
  pagoID: String

  ingreso: Boolean
  horaIngreso: AWSDateTime

  fechaID: ID @index(name: "byFecha")
  usuarioID: ID @index(name: "byUsuario")
  guiaID: ID

  tipoPago: tipoPago

  materialChecked: String
}

type Fecha
  @model
  @auth(
    rules: [
      {
        allow: private
        # , operations: [create, read]
      }
      # { allow: groups, groups: ["Admin"] }
      # { allow: owner }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  personasTotales: Int!

  fechaInicial: AWSTimestamp!
  fechaFinal: AWSTimestamp!
  precio: Float!
  comision: Float!
  experienciaPorPersona: Int

  itinerario: String!

  puntoReunionNombre: String!
  puntoReunionId: String
  puntoReunionLink: String
  puntoReunionCoords: String

  allowTercera: Boolean!
  allowNinos: Boolean!
  material: String
  incluido: String!
  titulo: String
  descripcion: String
  imagenRuta: String

  imagenFondo: String
  tituloAventura: String

  aventuraID: ID! @index(name: "byAventura")
  usuarioID: ID! @index(name: "byUsuario")

  dificultad: Int

  Reservas: [Reserva] @hasMany(indexName: "byFecha", fields: ["id"])
  ChatRoom: [ChatRoom] @hasMany(indexName: "byFecha", fields: ["id"])
}

type Usuario
  @model
  @auth(
    rules: [
      {
        allow: public
        # , operations: [create]
      }
      # { allow: private, operations: [read] }
      # { allow: groups, groups: ["Admin"] }
      # { allow: owner, ownerField: "owner" }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  tipo: TipoUsuario
  guia: Boolean

  calificacion: Float
  numResenas: Int

  nombre: String
  apellido: String

  foto: String
  imagenFondo: String
  nickname: String

  # Nivel del usuario
  experience: Int

  stripeID: String

  admin: Boolean

  selfie: String
  ID: [String]
  certificaciones: [String]

  telefono: String
  sitioWeb: AWSURL

  CuentaBancaria: String

  fechaNacimiento: AWSJSON
  direccion: AWSJSON

  rfcIndividual: String
  rfcCompania: String

  capacidadMaxima: Int
  comentariosAdicionales: String

  notificationToken: String

  owner: String

  newMessages: Int

  AventurasAutorizadas: [Aventura] @manyToMany(relationName: "AventuraUsuarios")

  Mensajes: [Mensaje] @hasMany(indexName: "byUsuario", fields: ["id"])

  ChatRooms: [ChatRoom] @manyToMany(relationName: "ChatRoomUsuarios")

  Reservas: [Reserva] @hasMany(indexName: "byUsuario", fields: ["id"])

  Fechas: [Fecha] @hasMany(indexName: "byUsuario", fields: ["id"])

  Notificaciones: [Notificacion]
    @hasMany(indexName: "byUsuario", fields: ["id"])

  SolicitudesCreadas: [SolicitudGuia]
    @hasMany(indexName: "byUsuario", fields: ["id"])

  Comentarios: [Comentario] @hasMany(indexName: "byUsuario", fields: ["id"])
}

type ChatRoom @model @auth(rules: [{ allow: private }]) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  name: String!
  picture: String
  lastMessage: Mensaje @hasOne

  fechaID: ID @index(name: "byFecha")
  guiaID: ID

  Mensajes: [Mensaje]
    @hasMany(
      indexName: "byChatRoom" #, fields: ["id"]
    )

  Participantes: [Usuario] @manyToMany(relationName: "ChatRoomUsuarios")
}

type Mensaje
  @model
  @auth(
    rules: [
      {
        allow: private
        # , operations: [read]
      }
      #  , { allow: owner }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  content: String!
  usuarioID: ID @index(name: "byUsuario")
  chatroomID: ID @index(name: "byChatRoom")
}

type SolicitudGuia
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: owner, ownerField: "owner" }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  owner: String

  status: StatusSolicitud!
  evaluadorID: ID
  usuarioID: ID @index(name: "byUsuario")
  mensaje: String
  Aventuras: [Aventura] @manyToMany(relationName: "AventuraSolicitudGuias")
}

type Notificacion
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: public, operations: [create] }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  tipo: TipoNotificacion!
  titulo: String!
  descripcion: String
  usuarioID: ID! @index(name: "byUsuario")

  imagen: String

  owner: String

  leido: Boolean
  showAt: AWSTimestamp

  reservaID: ID
  fechaID: ID
  aventuraID: ID
  guiaID: ID
  solicitudGuiaID: ID
}

type Comentario
  @model
  @auth(
    rules: [
      {
        allow: private
        # , operations: [read]
      }
      # { allow: owner}
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  usuarioCalificadoID: ID! @index(name: "byUsuario")
  body: String
  calificacion: Float!

  creatorID: ID
}

type Publicidad
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  tipo: TipoPublicidad!

  titulo: String!
  descripcion: String
  imagenFondo: String!
  video: String
  linkAnuncio: String

  aventuraID: ID
}

enum EstadoAventura {
  AUTORIZADO
  PENDIENTE
  RECHAZADO
}

enum TipoNotificacion {
  RESERVAENFECHA
  RESERVACREADA

  RECORDATORIOFECHA

  SOLICITUDGUIAAPROVADA
  SOLICITUDGUIARECHAZADA
  SOLICITUDGUIA

  SOLICITUDAVENTURAAPROVADA
  SOLICITUDAVENTURARECHAZADA
  SOLICITUDAVENTURA

  ADMIN
  BIENVENIDA
  FECHACREADA

  CALIFICAUSUARIO
}

enum TipoPublicidad {
  AVENTURA
  ANUNCIO
  ACTUALIZACION
}

enum Categorias {
  APLINISMO
  CICLISMO
  OTROS
}

enum StatusSolicitud {
  APROVADA
  PENDIENTE
  RECHAZADA
}

enum TipoUsuario {
  AGENCIA
  GUIAINDIVIDUAL
}

# type AventuraSolicitudGuia
#   @model #(queries: null)
#   @key(name: "byAventura", fields: ["aventuraID", "solicitudguiaID"])
#   @key(name: "bySolicitudGuia", fields: ["solicitudguiaID", "aventuraID"])
#   @auth(rules: [{ allow: private }]) {
#   id: ID!

#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!

#   aventuraID: ID!
#   solicitudguiaID: ID!

#   aventura: Aventura! @connection(fields: ["aventuraID"])
#   solicitudguia: SolicitudGuia! @connection(fields: ["solicitudguiaID"])
# }

# type AventuraUsuario
#   @model #(queries: null)
#   @key(name: "byAventura", fields: ["aventuraID", "usuarioID"])
#   @key(name: "byUsuario", fields: ["usuarioID", "aventuraID"])
#   @auth(rules: [{ allow: private }]) {
#   id: ID!

#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!

#   aventuraID: ID!
#   usuarioID: ID!

#   owner: String

#   aventura: Aventura! @connection(fields: ["aventuraID"])
#   usuario: Usuario! @connection(fields: ["usuarioID"])
# }

# type ChatRoomUsuario
#   @model #(queries: null)
#   @key(name: "byChatRoom", fields: ["chatroomID", "usuarioID"])
#   @key(name: "byUsuario", fields: ["usuarioID", "chatroomID"])
#   @auth(rules: [{ allow: private }]) {
#   id: ID!

#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!

#   chatroomID: ID!
#   usuarioID: ID!
#   newMessages: Int

#   owner: String

#   chatroom: ChatRoom! @connection(fields: ["chatroomID"])
#   usuario: Usuario! @connection(fields: ["usuarioID"])
# }

# ########################################################
# ########################FUNCIONES#######################
# ########################################################
# type Mutation {
#   createPaymentIntent(
#     amount: Float!
#     destinationStripeID: String!
#     comision: Float!
#     fechaID: String!
#     usuarioID: String!
#   ): PaymentIntent! @function(name: "CreatePaymentIntent-${env}")

#   createStripeAcount(
#     email: AWSEmail!
#     phone: AWSPhone!

#     first_name: String!
#     last_name: String!

#     # Cuenta bancaria
#     accountNumber: String!

#     # Sub usuario
#     userSub: ID!

#     # Imagenes de verificacion
#     documentIdBack: String!
#     documentIdFront: String!

#     # Fecha nacimiento
#     day: Int!
#     month: Int!
#     year: Int!

#     # Adress
#     city: String!
#     country: String!
#     line1: String!
#     postal_code: Int!
#     state: String!

#     # Terms of service agree
#     ip: AWSIPAddress!
#     date: AWSTimestamp!

#     # Datos si es compañia
#     companyName: String
#     url: AWSURL

#     # Cuenta individual o de compañia
#     accountType: AccountType!

#     # RFC infdividual que se agregara al perfil del dueño si se especifican varios
#     rfcIndividual: String
#     rfcCompania: String
#   ): CreateAcountResponse @function(name: "CreateStripeAcount-${env}")
# }

enum AccountType {
  INDIVIDUAL
  COMPANY
}

enum tipoPago {
  EFECTIVO
  TARJETA
}

type PaymentIntent {
  id: String
  clientSecret: String
}

type CreateAcountResponse {
  id: String
  errors: Boolean
}
