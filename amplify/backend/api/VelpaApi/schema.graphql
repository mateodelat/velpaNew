type Aventura @model @auth(rules: [
   {allow: private, operations: [read]},
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  titulo: String!
  imagenFondoIdx: Int!
  imagenDetalle: [String]!

  precioMin: Float
  precioMax: Float

  duracion: String
  descripcion: String
  dificultad: Float

  ubicacionNombre: String!
  ubicacionId: String!
  ubicacionLink: String
  coordenadas: AWSJSON!

  
  comision: Float!
  estadoAventura: EstadoAventura!
  altitud: Float
  distanciaRecorrida: Float
  altimetriaRecorrida: Float
  categoria: Categorias

  materialDefault: String
  incluidoDefault: [String]

  usuarioID:String


  SolicitudGuias: [AventuraSolicitudGuia] @connection(keyName: "byAventura", fields: ["id"])
  UsuariosAutorizados: [AventuraUsuario] @connection(keyName: "byAventura", fields: ["id"])
  Fechas: [Fecha] @connection(keyName: "byAventura", fields: ["id"])
}

type Reserva @model 
@key(name: "byFecha", fields: ["fechaID"]) 
@key(name: "byUsuario", fields: ["usuarioID"]) 
@auth(rules: [
   {allow: private, operations: [read]}, 
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  
  total: Float!
  comision: Float!
  pagadoAlGuia:Float!
  
  tercera: Int!
  ninos: Int!
  adultos: Int!
  pagoID: String

  fechaID: ID
  usuarioID: ID
  guiaID: ID

  tipoPago:tipoPago

  materialChecked:String
}

type Fecha @model 
@key(name: "byAventura", fields: ["aventuraID"]) 
@key(name: "byUsuario", fields: ["usuarioID"]) 
@auth(rules: [
   {allow: private, operations: [read,update]}, 
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  personasTotales: Int!
  fechaInicial: AWSTimestamp!
  fechaFinal: AWSTimestamp!
  precio: Float!
  comision: Float!
  experienciaPorPersona:Int
  
  itinerario: String!

  puntoReunionNombre: String!
  puntoReunionId: String
  puntoReunionLink:String
  puntoReunionCoords:String
  
  allowTercera: Boolean!
  allowNinos: Boolean!
  material: String
  incluido: String!
  titulo: String
  descripcion: String
  imagenRuta: String

  imagenFondo:String
  tituloAventura:String

  aventuraID: ID!
  usuarioID: ID!

  dificultad:Int

  Reservas: [Reserva] @connection(keyName: "byFecha", fields: ["id"])
  ChatRoom: [ChatRoom] @connection(keyName: "byFecha", fields: ["id"])
}

type Usuario @model 
@auth(rules: [
   {allow: public, operations: [create,read]}, 
   {allow: private, operations: [read,update]}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, 
   {allow: owner, ownerField: "owner"}
  ]) 
  {
  id: ID!
  tipo: TipoUsuario
  guia:Boolean

  calificacion:Float
  numResenas:Int

  nombre: String
  apellido: String

  nombreAgencia:String
  
  foto: String
  nickname: String

  # Nivel del usuario
  experience:Int

  stripeID: String

  admin:Boolean
  
  selfie: String
  ID: [String]
  certificaciones: [String]

  telefono: String
  sitioWeb: AWSURL

  CuentaBancaria:String

  fechaNacimiento:AWSJSON
  direccion:AWSJSON

  rfcIndividual:String
  rfcCompania:String

  capacidadMaxima: Int
  comentariosAdicionales: String

  notificationToken:String

  owner: String

  newMessages:Int
  
  AventurasAutorizadas: [AventuraUsuario] @connection(keyName: "byUsuario", fields: ["id"])
  Mensajes: [Mensaje] @connection(keyName: "byUsuario", fields: ["id"])
  ChatRooms: [ChatRoomUsuario] @connection(keyName: "byUsuario", fields: ["id"])
  Reservas: [Reserva] @connection(keyName: "byUsuario", fields: ["id"])
  Fechas: [Fecha] @connection(keyName: "byUsuario", fields: ["id"])
  Notificaciones:[Notificacion] @connection(keyName: "byUsuario", fields: ["id"])
  SolicitudesCreadas: [SolicitudGuia] @connection(keyName: "byUsuario", fields: ["id"])
  Comentarios:[Comentario] @connection(keyName: "byUsuario", fields: ["id"])
}

type ChatRoom @model 
@auth(rules: [
   {allow: public, operations: [read]}, 
   {allow: private}
  ]) 
@key(name: "byFecha", fields: ["fechaID"])
{
  id: ID!
  name: String!
  picture: String
  lastMessage: Mensaje @connection

  fechaID: ID
  guiaID: ID

  Mensajes: [Mensaje] @connection(keyName: "byChatRoom", fields: ["id"])
  Participantes: [ChatRoomUsuario] @connection(keyName: "byChatRoom", fields: ["id"])
}

type Mensaje @model 
@key(name: "byUsuario", fields: ["usuarioID"]) 
@key(name: "byChatRoom", fields: ["chatroomID"])
@auth(rules: [
   {allow: owner, operations: [create, delete]}, 
   {allow: private, operations: [read]},
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  content: String!
  usuarioID: ID
  chatroomID: ID
}


type SolicitudGuia @model 
@auth(rules: [
   {allow: owner}, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ])
@key(name: "byUsuario", fields: ["usuarioID"])
 {

  id: ID!
  status: StatusSolicitud!
  evaluadorID: ID
  usuarioID:ID
  mensaje:String
  Aventuras: [AventuraSolicitudGuia] @connection(keyName: "bySolicitudGuia", fields: ["id"])
}

type Notificacion @model
 @key(name: "byUsuario", fields: ["usuarioID"])
 @auth(rules: [
   {allow: owner, ownerField: "owner"},
   {allow: public, operations: [create], }, 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {

  id: ID!
  tipo: TipoNotificacion!
  titulo:String!
  descripcion:String
  usuarioID: ID!

  imagen:String

  owner:String

  leido:Boolean
  showAt:AWSTimestamp

  reservaID: ID
  fechaID: ID
  aventuraID: ID
  guiaID: ID
  solicitudGuiaID: ID
}

type Comentario @model
 @key(name: "byUsuario", fields: ["usuarioCalificadoID"])
 @auth(rules: [
   {allow: owner, operations: [create, delete]}, 
   {allow: private, operations: [read]},
  ]) {

  id: ID!

  usuarioCalificadoID: ID!
  body:String
  calificacion:Float!
  creatorID: ID

}


type Publicidad @model
 @auth(rules: [
   {allow: private, operations: [read]} , 
   {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]},
  ]) {

  id: ID!
  tipo: TipoPublicidad!

  titulo:String!
  descripcion:String
  imagenFondo:String!
  video:String
  linkAnuncio:String

  aventuraID: ID
}


enum EstadoAventura {
  AUTORIZADO
  PENDIENTE
  RECHAZADO
}


enum TipoNotificacion{
  RESERVAENFECHA
  RESERVACREADA

  RECORDATORIOFECHA

  SOLICITUDGUIAAPROVADA
  SOLICITUDGUIARECHAZADA
  SOLICITUDGUIA

  SOLICITUDAVENTURAAPROVADA
  SOLICITUDAVENTURARECHAZADA
  SOLICITUDAVENTURA

  ADMIN
  BIENVENIDA
  FECHACREADA

  CALIFICAUSUARIO
}

enum TipoPublicidad {
  AVENTURA
  ANUNCIO
  ACTUALIZACION
}

enum Categorias {
  APLINISMO
  CICLISMO
  OTROS
}

enum StatusSolicitud {
  APROVADA
  PENDIENTE
  RECHAZADA
}

enum TipoUsuario {
  AGENCIA
  GUIAINDIVIDUAL
}

type AventuraSolicitudGuia @model(queries: null) @key(name: "byAventura", fields: ["aventuraID", "solicitudguiaID"]) @key(name: "bySolicitudGuia", fields: ["solicitudguiaID", "aventuraID"]) @auth(rules: [{allow: private, operations: [read]}, {allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  aventuraID: ID!
  solicitudguiaID: ID!
  aventura: Aventura! @connection(fields: ["aventuraID"])
  solicitudguia: SolicitudGuia! @connection(fields: ["solicitudguiaID"])
}

type AventuraUsuario @model(queries: null) @key(name: "byAventura", fields: ["aventuraID", "usuarioID"]) @key(name: "byUsuario", fields: ["usuarioID", "aventuraID"]) @auth(rules: [{allow: private, operations: [read]}, {allow: owner}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: private, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  aventuraID: ID!
  usuarioID: ID!
  aventura: Aventura! @connection(fields: ["aventuraID"])
  usuario: Usuario! @connection(fields: ["usuarioID"])
}

type ChatRoomUsuario @model(queries: null) @key(name: "byChatRoom", fields: ["chatroomID", "usuarioID"]) @key(name: "byUsuario", fields: ["usuarioID", "chatroomID"]) @auth(rules: [{allow: public, operations: [read]}, {allow: private}, {allow: private, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: owner}]) {
  id: ID!
  chatroomID: ID!
  usuarioID: ID!
  newMessages:Int
  chatroom: ChatRoom! @connection(fields: ["chatroomID"])
  usuario: Usuario! @connection(fields: ["usuarioID"])
}



########################################################
########################FUNCIONES#######################
########################################################
type Mutation {
  createPaymentIntent(amount: Float!, destinationStripeID: String!, comision: Float!,fechaID:String!,usuarioID:String!): PaymentIntent! @function(name: "CreatePaymentIntent-${env}")

  createStripeAcount(
    email:AWSEmail!
    phone:AWSPhone!

    first_name:String!
    last_name:String!

    # Cuenta bancaria
    accountNumber:String!

    # Sub usuario
    userSub:ID!

    # Imagenes de verificacion
    documentIdBack:String!
    documentIdFront:String!

    # Fecha nacimiento
    day:Int!
    month:Int!
    year:Int!

    # Adress
    city:String!
    country:String!
    line1:String!
    postal_code:Int!
    state:String!

    # Terms of service agree
    ip:AWSIPAddress!
    date:AWSTimestamp!

    # Datos si es compañia
    companyName:String
    url:AWSURL

    # Cuenta individual o de compañia
    accountType:AccountType!

    # RFC infdividual que se agregara al perfil del dueño si se especifican varios
    rfcIndividual:String
    rfcCompania:String

  ): CreateAcountResponse @function(name: "CreateStripeAcount-${env}")
}

enum AccountType {
  INDIVIDUAL
  COMPANY
}

enum tipoPago {
  EFECTIVO
  TARJETA
}


type PaymentIntent {
  id: String
  clientSecret: String
}

type CreateAcountResponse {
  id: String
  errors:Boolean
}


 